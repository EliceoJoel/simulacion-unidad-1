{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cara","escudo","probCara","probEscudo","uno","dos","tres","cuatro","cinco","seis","probUno","probDos","probTres","probCuatro","probCinco","probSeis","resultados","App","state","nroTirosMoneda","nroTirosDado","showMoneda","showDado","onChange","bind","experimentoMoneda","experimentoDado","e","this","setState","target","name","value","minimo","maximo","Math","floor","random","preventDefault","i","aleatorio","push","res","className","noValidate","onSubmit","htmlFor","type","min","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f0ec911.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nvar cara=0, escudo=0, probCara=0, probEscudo=0\nvar uno=0, dos=0, tres=0, cuatro=0, cinco=0, seis=0\nvar probUno=0, probDos=0, probTres=0, probCuatro=0, probCinco=0, probSeis=0\nvar resultados = []\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            nroTirosMoneda: 0,\n            nroTirosDado: 0,\n            uno: 0, dos:0, tres:0, cuatro:0, cinco:0, seis:0,\n            probUno: '0%', probDos:'0%', probTres:'0%', probCuatro:'0%', probCinco:'0%', probSeis:'0%',\n            showMoneda:false,\n            showDado:false,\n        }\n\n        this.onChange = this.onChange.bind(this)\n        this.experimentoMoneda = this.experimentoMoneda.bind(this)\n        this.experimentoDado =this.experimentoDado.bind(this)\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n        this.setState({showMoneda:false, showDado:false})\n        //borra datos anteriores\n        cara=0; escudo=0; probCara=0; probEscudo=0;\n        uno=0; dos=0; tres=0; cuatro=0; cinco=0; seis=0;\n        probUno=0; probDos=0; probTres=0; probCuatro=0; probCinco=0; probSeis=0; \n        resultados=[]\n    }\n\n    aleatorio(minimo, maximo){\n      return Math.floor(Math.random() * ((maximo+1) - minimo) + minimo);\n    }\n\n    experimentoMoneda(e) {\n      e.preventDefault()\n      //borra datos anteriores\n      cara=0; escudo=0; probCara=0; probEscudo=0; \n      resultados=[]\n\n      this.setState({showMoneda:true})\n      for(var i=0 ; i<this.state.nroTirosMoneda ; i++){\n        var res = this.aleatorio(1,2)\n        if(res === 1){\n          cara++\n          resultados.push(\"C\")\n        }else{\n          escudo++\n          resultados.push(\"E\")\n        }\n      }\n      probCara=(cara/this.state.nroTirosMoneda)*100\n      probEscudo=(escudo/this.state.nroTirosMoneda)*100\n    }\n\n    experimentoDado(e) {\n      e.preventDefault()\n      //borra datos anteriores\n      uno=0; dos=0; tres=0; cuatro=0; cinco=0; seis=0;\n      probUno=0; probDos=0; probTres=0; probCuatro=0; probCinco=0; probSeis=0;\n      resultados=[]\n\n      this.setState({showDado:true})\n      for(var i=0 ; i<this.state.nroTirosDado ; i++){\n        var res = this.aleatorio(1,6)\n        if(res === 1){\n          uno++; resultados.push(res)\n        }\n        if(res === 2){\n          dos++; resultados.push(res)\n        }\n        if(res === 3){\n          tres++; resultados.push(res)\n        }\n        if(res === 4){\n          cuatro++; resultados.push(res)\n        }\n        if(res === 5){\n          cinco++; resultados.push(res)\n        }\n        if(res === 6){\n          seis++; resultados.push(res)\n        }\n      }\n      probUno=(uno/this.state.nroTirosDado)*100\n      probDos=(dos/this.state.nroTirosDado)*100\n      probTres=(tres/this.state.nroTirosDado)*100\n      probCuatro=(cuatro/this.state.nroTirosDado)*100\n      probCinco=(cinco/this.state.nroTirosDado)*100\n      probSeis=(seis/this.state.nroTirosDado)*100\n      \n  }\n\n    render() {\n        return (\n          <div>\n            <div className=\"p-3 mb-2 bg-success text-white text-center h3\">Proyecto de unidad 1 de simulaci√≥n</div>\n            <div className=\"container mt-5\">\n              <div className=\"row\">\n                <div className=\"col\">\n                  <form noValidate onSubmit={this.experimentoMoneda}>\n                    <h4 className=\"text-center mb-4\">Probabilidad de tirar moneda</h4>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"titulo\">Numero de tiros</label>\n                      <input \n                        type=\"number\" \n                        min=\"0\" \n                        className=\"form-control\" \n                        name=\"nroTirosMoneda\"\n                        value={this.state.nroTirosMoneda}\n                        onChange={this.onChange}\n                        />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success\">Realizar experimento</button>\n                  </form>\n                  {this.state.showMoneda?\n                    <div>\n                      <div className=\"row mt-4\">\n                        <div className=\"col-md-6\">\n                          Numero de caras : {cara}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad caras: {probCara+\"%\"}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Numero de escudos : {escudo}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad escudos: {probEscudo+\"%\"}\n                        </div>\n                      </div>\n                      <div className=\"container my-4\">\n                        <div className=\"row\">\n                          {resultados.map(res => (\n                            <div className=\"col-md-1 border\">{res}</div>\n                           ))\n                          }\n                        </div>\n                      </div>\n                    </div>\n                  :null\n                  }\n                </div>\n                <div className=\"col\">\n                  <form noValidate onSubmit={this.experimentoDado}>\n                    <h4 className=\"text-center mb-4\">Probabilidad de tirar dado</h4>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"titulo\">Numero de tiros</label>\n                      <input \n                        type=\"number\" \n                        min=\"0\" \n                        className=\"form-control\" \n                        name=\"nroTirosDado\"\n                        value={this.state.nroTirosDado}\n                        onChange={this.onChange}\n                        />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success\">Realizar experimento</button>\n                  </form>\n                  {this.state.showDado?\n                    <div>\n                      <div className=\"row mt-4\">\n                        <div className=\"col-md-6\">\n                          Cantidad de uno : {uno}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad : {probUno+\"%\"}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Cantidad de dos : {dos}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad : {probDos+\"%\"}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Cantidad de tres : {tres}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad : {probTres+\"%\"}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Cantidad de cuatro : {cuatro}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad : {probCuatro+\"%\"}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Cantidad de cinco : {cinco}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad : {probCinco+\"%\"}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Cantidad de seis : {seis}\n                        </div>\n                        <div className=\"col-md-6\">\n                          Probabilidad : {probSeis+\"%\"}\n                        </div>\n                      </div>\n                      <div className=\"container my-4\">\n                        <div className=\"row\">\n                          {resultados.map(res => (\n                            <div className=\"col-md-1 border\">{res}</div>\n                           ))\n                          }\n                        </div>\n                      </div>\n                    </div>\n                  :null\n                  }  \n                </div>\n              </div>\n            </div>\n          </div>\n        )\n    }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}